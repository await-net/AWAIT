// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeleniumRecorder.DAL;

#nullable disable

namespace SeleniumRecorder.Migrations
{
    [DbContext(typeof(AwaitDbContext))]
    [Migration("20230620140541_TestSuitModel")]
    partial class TestSuitModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWAIT.DAL.ElementProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TargetModelId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TargetModelId");

                    b.ToTable("ElementProperty");
                });

            modelBuilder.Entity("AWAIT.DAL.EventDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestModelId");

                    b.ToTable("EventData", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.TargetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventDataModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventDataModelId");

                    b.ToTable("TargetModel");
                });

            modelBuilder.Entity("AWAIT.DAL.TestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventDataModelId")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestSuitModelId")
                        .HasColumnType("int");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestWebDriver")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestSuitModelId");

                    b.ToTable("TestModel");
                });

            modelBuilder.Entity("AWAIT.DAL.TestSuitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SuitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuitPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestSuit", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.ElementProperty", b =>
                {
                    b.HasOne("AWAIT.DAL.TargetModel", "TargetModel")
                        .WithMany("ElementProperties")
                        .HasForeignKey("TargetModelId");

                    b.Navigation("TargetModel");
                });

            modelBuilder.Entity("AWAIT.DAL.EventDataModel", b =>
                {
                    b.HasOne("AWAIT.DAL.TestModel", null)
                        .WithMany("Events")
                        .HasForeignKey("TestModelId");
                });

            modelBuilder.Entity("AWAIT.DAL.TargetModel", b =>
                {
                    b.HasOne("AWAIT.DAL.EventDataModel", null)
                        .WithMany("Targets")
                        .HasForeignKey("EventDataModelId");
                });

            modelBuilder.Entity("AWAIT.DAL.TestModel", b =>
                {
                    b.HasOne("AWAIT.DAL.TestSuitModel", null)
                        .WithMany("Tests")
                        .HasForeignKey("TestSuitModelId");
                });

            modelBuilder.Entity("AWAIT.DAL.EventDataModel", b =>
                {
                    b.Navigation("Targets");
                });

            modelBuilder.Entity("AWAIT.DAL.TargetModel", b =>
                {
                    b.Navigation("ElementProperties");
                });

            modelBuilder.Entity("AWAIT.DAL.TestModel", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("AWAIT.DAL.TestSuitModel", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
