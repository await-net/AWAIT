// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeleniumRecorder.DAL;

#nullable disable

namespace SeleniumRecorder.Migrations
{
    [DbContext(typeof(AwaitDbContext))]
    partial class AwaitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWAIT.DAL.EventPropertyTargetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventTargetEventId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetModelTargetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTargetEventId");

                    b.HasIndex("TargetModelTargetId");

                    b.ToTable("EPTs", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.RecorderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RecorderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecorderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecorderStartUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecorderWebDriver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Recorders", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.SuitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SuitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuitPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Suits", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.TargetModel", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TargetId"));

                    b.Property<string>("ByCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ByXPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TargetId");

                    b.ToTable("Targets", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.TargetTypeModel", b =>
                {
                    b.Property<int>("TargetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TargetTypeId"));

                    b.Property<int?>("TargetModelTargetId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TargetTypeId");

                    b.HasIndex("TargetModelTargetId");

                    b.ToTable("TargetTypes", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.TestEventModel", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecorderId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetEventTargetId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("RecorderId");

                    b.HasIndex("TargetEventTargetId");

                    b.ToTable("TestEvents", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AWAIT.DAL.EventPropertyTargetModel", b =>
                {
                    b.HasOne("AWAIT.DAL.TestEventModel", "EventTarget")
                        .WithMany()
                        .HasForeignKey("EventTargetEventId");

                    b.HasOne("AWAIT.DAL.TargetModel", "TargetModel")
                        .WithMany()
                        .HasForeignKey("TargetModelTargetId");

                    b.Navigation("EventTarget");

                    b.Navigation("TargetModel");
                });

            modelBuilder.Entity("AWAIT.DAL.SuitModel", b =>
                {
                    b.HasOne("AWAIT.DAL.UserModel", "User")
                        .WithMany("Suits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AWAIT.DAL.TargetTypeModel", b =>
                {
                    b.HasOne("AWAIT.DAL.TargetModel", null)
                        .WithMany("Targets")
                        .HasForeignKey("TargetModelTargetId");
                });

            modelBuilder.Entity("AWAIT.DAL.TestEventModel", b =>
                {
                    b.HasOne("AWAIT.DAL.RecorderModel", "Recorder")
                        .WithMany()
                        .HasForeignKey("RecorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWAIT.DAL.TargetModel", "TargetEvent")
                        .WithMany()
                        .HasForeignKey("TargetEventTargetId");

                    b.Navigation("Recorder");

                    b.Navigation("TargetEvent");
                });

            modelBuilder.Entity("AWAIT.DAL.TargetModel", b =>
                {
                    b.Navigation("Targets");
                });

            modelBuilder.Entity("AWAIT.DAL.UserModel", b =>
                {
                    b.Navigation("Suits");
                });
#pragma warning restore 612, 618
        }
    }
}
