@model SuitTestView
<div class="col p-3 mb-2 bg-black text-white">
    <!--CONSOLE-CARD-->
    <div class="row">
        <!--CONSOLE-HEADING-->
        <div class="col-12 p-2">
            <div class="border-top border-bottom border-dark d-flex align-items-center justify-content-center">
                <p class="h5 p-2 text-center">AWAIT CONSOLE</p>
            </div>
        </div>
        <!--CONSOLE-OUTPUT-WINDOW-->
        <div class="col-12 bg-black">
            <div class="console-output"></div>
            <span class="console-cursor"></span>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript">
    //  $(document).ready(function () {
    //    var delay = 500;
    //    $('.card').each(function (index) {
    //        var card = $(this);
    //        setTimeout(function () {
    //            card.removeClass('hidden').addClass('visible');
    //        }, index * delay);
    //    });
    //});


    //const consoleOutput = document.querySelector('.console-output');
    //const consoleCursor = document.querySelector('.console-cursor');
    //const texts = ['@Model.ConsoleView.Action', '@Model.ConsoleView.Value'];
    //let index = 0;

    //// Animate typing effect
    //function typeText(text) {
    //    const characters = text.split('');
    //    let delay = 0;

    //    characters.forEach((char, i) => {
    //        delay += 100; // Interval for typing

    //        setTimeout(() => {
    //            consoleOutput.textContent += char;
    //            updateCursorPosition();
    //        }, delay);
    //    });

    //    setTimeout(() => {
    //        backspaceText(text);
    //    }, delay + 1000);
    //}

    //// Animate backspacing effect
    //function backspaceText(text) {
    //    const characters = text.split('');
    //    let delay = 0;

    //    characters.forEach((char, i) => {
    //        delay += 50;

    //        setTimeout(() => {
    //            consoleOutput.textContent = consoleOutput.textContent.slice(0, -1);
    //            updateCursorPosition();
    //        }, delay);
    //    });

    //    setTimeout(() => {
    //        index = (index + 1) % texts.length;
    //        typeText(texts[index]);
    //    }, delay + 500);
    //}

    //// Update console cursor position
    //function updateCursorPosition() {
    //    const consoleText = consoleOutput.textContent;
    //    const consoleTextLength = consoleText.length;

    //    if (consoleTextLength === 0) {
    //        consoleCursor.style.marginLeft = '0';
    //    } else {
    //        const lastCharacter = consoleOutput.lastChild;
    //        if (lastCharacter instanceof Element) { // Check if lastCharacter is an element
    //            const rect = lastCharacter.getBoundingClientRect();
    //            const marginLeft = rect.right + 'px';
    //            consoleCursor.style.marginLeft = marginLeft;
    //        }
    //    }
    //}

    //// Start printing text once loaded
    //window.addEventListener('DOMContentLoaded', () => {
    //    typeText(texts[index]);
    //});
</script>